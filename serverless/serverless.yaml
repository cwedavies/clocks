service: clocks

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
          - "dynamodb:PutItem"
          - "dynamodb:GetItem"
          - "dynamodb:UpdateItem"
          - "dynamodb:DeleteItem"
          - "dynamodb:BatchGetItem"
          - "dynamodb:BatchWriteItem"
          - "dynamodb:Scan"
          - "dynamodb:Query"
      Resource:
          - "arn:aws:dynamodb:us-east-1:*:*"

functions:
  websocketHandler:
    handler: websocket.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default
  streamHandler:
    handler: db-stream.handlerx
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - ConnectionsTable
              - Arn

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-plugin-offline-dynamodb-stream
  - serverless-offline

resources:
  Resources:
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: connections
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packager: yarn
  serverless-offline:
    allowCache: true
    host: 0.0.0.0
    port: 4000
  dynamodb:
    stages:
      - dev
    start:
      host: dynamodb
      port: 8000
      migrate: true
      noStart: true
  dynamodbStream:
    host: dynamodb
    port: 8000
    pollForever: true
    streams:
      - table: connections
        functions:
          - streamHandler
